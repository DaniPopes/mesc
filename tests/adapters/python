#!/usr/bin/env python3

import argparse
import json
import typing

from mesc.types import Endpoint, EndpointQuery
import mesc


def run_query(query: EndpointQuery) -> Endpoint | typing.Sequence[Endpoint] | None:
    if query["query_type"] == "default_endpoint":
        fields = typing.cast(mesc.types.DefaultEndpointQuery, query["fields"])
        return mesc.get_default_endpoint(**fields)
    elif query["query_type"] == "endpoint_by_name":
        fields = typing.cast(mesc.types.EndpointNameQuery, query["fields"])
        return mesc.get_endpoint_by_name(**fields)
    elif query["query_type"] == "endpoint_by_network":
        fields = typing.cast(mesc.types.EndpointNetworkQuery, query["fields"])
        return mesc.get_endpoint_by_network(**fields)
    elif query["query_type"] == "user_input":
        fields = typing.cast(mesc.types.UserInputQuery, query["fields"])
        return mesc.query_user_input(**fields)
    elif query["query_type"] == "multi_endpoint":
        fields = typing.cast(mesc.types.MultiEndpointQuery, {k: v for k, v in query.items() if k != 'query_type'})
        return mesc.find_endpoints(**fields)
    elif query["query_type"] == "global_metadata":
        return mesc.get_global_metadata()
    else:
        raise Exception("invalid query type: " + str(query["query_type"]))


if __name__ == "__main__":
    # load test
    parser = argparse.ArgumentParser()
    parser.add_argument("test")
    args = parser.parse_args()
    test = json.loads(args.test)

    # run test
    try:
        result = run_query(test)
        print(json.dumps(result))
    except Exception as e:
        print("FAIL")
        print(repr(e))
