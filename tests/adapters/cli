#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
from typing import cast
from mesc.types import MescQuery


def run_query(query: MescQuery) -> str:
    if query["query_type"] == "default_endpoint":
        cmd: list[str] = ["mesc", "endpoint", "--json"]
    elif query["query_type"] == "endpoint_by_name":
        name = cast(str, query["fields"]["name"])  # type: ignore
        cmd = ["mesc", "endpoint", "--json", "--name", name]
    elif query["query_type"] == "endpoint_by_network":
        chain_id = cast(str, query["fields"]["chain_id"])  # type: ignore
        cmd = ["mesc", "endpoint", "--json", "--network", chain_id]
    elif query["query_type"] == "user_input":
        user_input = query["fields"]["user_input"]  # type: ignore
        cmd = ["mesc", "endpoint", user_input, "--json"]
    elif query["query_type"] == "multi_endpoint":
        cmd = ["mesc", "ls", "--json"]
        for field in ["name", "url", "network"]:
            if query["fields"].get(field) is not None:
                cmd.append("--" + field)
                cmd.append(str(query["fields"][field]))  # type: ignore
    else:
        raise Exception("invalid query query_type: " + str(query["query_type"]))

    if query["fields"].get("profile") is not None:
        cmd.append("--profile")
        cmd.append(query["fields"]["profile"])  # type: ignore

    # output = subprocess.check_output(cmd)
    raw_output = subprocess.check_output(cmd, env=dict(os.environ))
    output = raw_output.decode("utf-8").strip()
    if output == "":
        output = "null"

    return output


if __name__ == "__main__":
    # load test
    parser = argparse.ArgumentParser()
    parser.add_argument("test")
    args = parser.parse_args()
    test = json.loads(args.test)

    # run test
    try:
        result = json.loads(run_query(test))
        print(json.dumps(result))
    except Exception as e:
        print("FAIL")
        print(e)
